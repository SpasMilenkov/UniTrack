<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UniTrackBackend</name>
    </assembly>
    <members>
        <member name="T:UniTrackBackend.Controllers.AbsencesController">
            <summary>
            Controller for handling operations related to student and teacher absences.
            Provides functionality for recording, retrieving, updating, and deleting absence records.
            </summary>
        </member>
        <member name="M:UniTrackBackend.Controllers.AbsencesController.PostAbsence(UniTrackBackend.Api.DTO.AbsenceDto)">
            <summary>
            Records a new absence.
            </summary>
            <param name="absence">The absence details to be recorded.</param>
            <returns>An ActionResult indicating the result of the operation.</returns>
        </member>
        <member name="M:UniTrackBackend.Controllers.AbsencesController.GetAllAbsences">
            <summary>
            Retrieves all recorded absences.
            </summary>
            <returns>A list of all absence records.</returns>
        </member>
        <member name="M:UniTrackBackend.Controllers.AbsencesController.GetAbsenceByStudentId(System.Int32)">
            <summary>
            Retrieves absences for a specific student by their ID.
            </summary>
            <param name="id">The ID of the student whose absences are to be retrieved.</param>
            <returns>An ActionResult containing the student's absence records or a not found result.</returns>
        </member>
        <member name="M:UniTrackBackend.Controllers.AbsencesController.GetAbsenceByTeacherId(System.Int32)">
            <summary>
            Retrieves absences for a specific teacher by their ID.
            </summary>
            <param name="id">The ID of the teacher whose absences are to be retrieved.</param>
            <returns>An ActionResult containing the teacher's absence records or a not found result.</returns>
        </member>
        <member name="M:UniTrackBackend.Controllers.AbsencesController.UpdateAbsence(System.Int32,UniTrackBackend.Api.DTO.AbsenceDto)">
            <summary>
            Updates an existing absence record.
            </summary>
            <param name="id">The ID of the absence record to update.</param>
            <param name="absence">The updated absence details.</param>
            <returns>Returns NoContent if the update is successful, otherwise returns BadRequest.</returns>
        </member>
        <member name="M:UniTrackBackend.Controllers.AbsencesController.DeleteAbsence(System.Int32)">
            <summary>
            Deletes a specific absence record by its ID.
            </summary>
            <param name="id">The ID of the absence record to delete.</param>
            <returns>Returns NoContent if the deletion is successful, otherwise NotFound.</returns>
        </member>
        <member name="T:UniTrackBackend.Controllers.AdminController">
            <summary>
            Handles administrative actions such as managing users.
            </summary>
        </member>
        <member name="M:UniTrackBackend.Controllers.AdminController.CreateUser(UniTrackBackend.Data.Models.User)">
            <summary>
            Creates a new user.
            </summary>
            <param name="user">The user object to create.</param>
            <returns>Returns a success message if creation is successful, otherwise a bad request.</returns>
        </member>
        <member name="M:UniTrackBackend.Controllers.AdminController.GetUser(System.String)">
            <summary>
            Retrieves a user by their ID.
            </summary>
            <param name="id">The ID of the user to retrieve.</param>
            <returns>The user object if found, otherwise returns not found.</returns>
        </member>
        <member name="M:UniTrackBackend.Controllers.AdminController.GetAdmin(System.String)">
            <summary>
            Retrieves an admin by their user ID.
            </summary>
            <param name="id">The ID of the admin to retrieve.</param>
            <returns>The user object if found, otherwise returns not found.</returns>
        </member>
        <member name="M:UniTrackBackend.Controllers.AdminController.GetAllUsers">
            <summary>
            Retrieves all registered users.
            </summary>
            <returns>A list of all users.</returns>
        </member>
        <member name="M:UniTrackBackend.Controllers.AdminController.UpdateUser(System.String,UniTrackBackend.Data.Models.User)">
            <summary>
            Updates the details of an existing user.
            </summary>
            <param name="id">The ID of the user to update.</param>
            <param name="user">The updated user object.</param>
            <returns>Returns no content if update is successful, otherwise a bad request.</returns>
        </member>
        <member name="M:UniTrackBackend.Controllers.AdminController.DeleteUser(System.String)">
            <summary>
            Deletes a user by their ID.
            </summary>
            <param name="id">The ID of the user to delete.</param>
            <returns>Returns no content if deletion is successful.</returns>
        </member>
        <member name="T:UniTrackBackend.Controllers.AnalysisController">
            <summary>
            Handles analysis of student data.
            </summary>
        </member>
        <member name="M:UniTrackBackend.Controllers.AnalysisController.GetAnalysis(System.Int32)">
            <summary>
            Generates an analysis for a given student based on their ID.
            </summary>
            <param name="studentId">The ID of the student for whom the analysis is to be generated.</param>
            <returns>An analysis model if successful, otherwise a bad request response.</returns>
        </member>
        <member name="M:UniTrackBackend.Controllers.ApprovalController.ApproveStudents(UniTrackBackend.Api.DTO.StudentApprovalDto)">
            <summary>
            Approves student registrations.
            </summary>
            <remarks>
            This endpoint approves pending student registrations. 
            Only accessible to users with the Admin role.
            </remarks>
            <response code="200">Returns a confirmation message when a student is approved.</response>
            <response code="401">Unauthorized if the user is not authenticated.</response>
            <response code="403">Forbidden if the user does not have the Admin role.</response>
        </member>
        <member name="M:UniTrackBackend.Controllers.ApprovalController.ApproveTeachers(UniTrackBackend.Api.DTO.TeacherApprovalDto)">
            <summary>
            Approves teacher registrations.
            </summary>
            <remarks>
            This endpoint approves pending teacher registrations.
            Only accessible to users with the Admin role.
            </remarks>
            <response code="200">Returns a confirmation message when a teacher is approved.</response>
            <response code="401">Unauthorized if the user is not authenticated.</response>
            <response code="403">Forbidden if the user does not have the Admin role.</response>
        </member>
        <member name="M:UniTrackBackend.Controllers.ApprovalController.ApproveParents(UniTrackBackend.Api.DTO.ParentDto)">
            <summary>
            Approves parent registrations.
            </summary>
            <remarks>
            This endpoint approves pending parent registrations.
            Only accessible to users with the Admin role.
            </remarks>
            <response code="200">Returns a confirmation message when a parent is approved.</response>
            <response code="401">Unauthorized if the user is not authenticated.</response>
            <response code="403">Forbidden if the user does not have the Admin role.</response>
        </member>
        <member name="M:UniTrackBackend.Controllers.AuthController.Login(UniTrackBackend.Api.DTO.LoginDto)">
            <summary>
            Authenticates a user and provides a JWT and refresh token.
            </summary>
            <remarks>
            This endpoint authenticates the user based on the provided email and password.
            If authentication is successful, it returns a JWT for accessing protected resources and a refresh token.
            The tokens are set as cookies in the response.
            </remarks>
            <param name="model">The login credentials (email and password).</param>
            <response code="200">Successful login with JWT and refresh token.</response>
            <response code="401">Unauthorized if credentials are invalid.</response>
        </member>
        <member name="M:UniTrackBackend.Controllers.AuthController.Register(UniTrackBackend.Api.DTO.RegisterDto)">
            <summary>
            Registers a new user and provides a JWT and refresh token.
            </summary>
            <remarks>
            This endpoint registers a new user with the provided details.
            On successful registration, it returns a JWT and a refresh token.
            </remarks>
            <param name="model">Registration details including email, password, and name.</param>
            <response code="200">Successful registration with JWT and refresh token.</response>
            <response code="400">Bad request if registration fails (e.g., email already in use).</response>
        </member>
        <member name="M:UniTrackBackend.Controllers.AuthController.RefreshToken">
            <summary>
            Refreshes the JWT using a refresh token.
            </summary>
            <remarks>
            This endpoint uses the refresh token provided in cookies to generate a new JWT and refresh token.
            If the refresh token is valid, it returns new tokens as cookies in the response.
            </remarks>
            <response code="200">Successful refresh with new JWT and refresh token.</response>
            <response code="400">Bad request if the refresh token is missing or invalid.</response>
        </member>
        <member name="M:UniTrackBackend.Controllers.AuthController.Logout">
            <summary>
            Logs out the user by invalidating the refresh token.
            </summary>
            <remarks>
            This endpoint logs out the current user by invalidating the refresh token.
            It deletes the refresh token cookie from the response.
            </remarks>
            <response code="200">Successful logout.</response>
        </member>
        <member name="M:UniTrackBackend.Controllers.AuthController.ConfirmEmail(System.String,System.String)">
            <summary>
            Confirms a user's email address.
            </summary>
            <remarks>
            This endpoint verifies a user's email address using a unique user ID and a token sent via email.
            It requires both the user ID and the token to confirm the email.
            </remarks>
            <param name="userId">The unique identifier of the user.</param>
            <param name="token">The token sent to the user's email for confirmation.</param>
            <response code="200">Email confirmed successfully.</response>
            <response code="400">Bad request if the user ID or token is missing or invalid.</response>
            <response code="404">User not found if the user ID does not match any existing user.</response>
        </member>
        <member name="M:UniTrackBackend.Controllers.AuthController.ForgotPassword(System.String)">
            <summary>
            Initiates the password reset process for a user.
            </summary>
            <remarks>
            This endpoint is used when a user forgets their password and needs to reset it.
            It sends a password reset link to the user's email if the account with the given email exists and is confirmed.
            </remarks>
            <param name="email">The email address of the user who wants to reset their password.</param>
            <response code="200">Indicates that a password reset link has been sent if an account with the email exists.</response>
            <response code="400">Bad request if the email is missing or invalid.</response>
        </member>
        <member name="M:UniTrackBackend.Controllers.AuthController.ResetPassword(UniTrackBackend.Api.DTO.ResetPasswordDto)">
            <summary>
            Resets a user's password.
            </summary>
            <remarks>
            This endpoint allows a user to reset their password using a token received in their email.
            It requires a valid token, the user's email, and the new password.
            </remarks>
            <param name="dto">The dto containing the email, token, and new password of the user.</param>
            <response code="200">Password has been reset successfully.</response>
            <response code="400">Bad request if the dto state is invalid or the request is invalid.</response>
        </member>
        <member name="T:UniTrackBackend.Controllers.MarkController">
            <summary>
            The MarkController is responsible for handling all HTTP requests related to the management of marks in the system.
            It provides functionality to add, retrieve, update, and delete marks. Additionally, it supports fetching marks
            based on various filters such as student ID, teacher ID, subject ID, and specific dates. The controller leverages
            the IMarkService for business logic operations and IMapper for object mapping between view models and data models.
            </summary>
        </member>
        <member name="M:UniTrackBackend.Controllers.MarkController.#ctor(UniTrackBackend.Services.IMarkService,UniTrackBackend.Services.Mappings.IMapper)">
            <summary>
            Initializes a new instance of the MarkController.
            </summary>
            <param name="markService">Service for managing marks.</param>
            <param name="mapper">Automapper for mapping between view models and data models.</param>
        </member>
        <member name="M:UniTrackBackend.Controllers.MarkController.AddMark(UniTrackBackend.Api.DTO.MarkDto)">
            <summary>
            Adds a new mark.
            </summary>
            <param name="model">The view model containing the mark details to add.</param>
            <returns>The created mark.</returns>
        </member>
        <member name="M:UniTrackBackend.Controllers.MarkController.GetMark(System.Int32)">
            <summary>
            Retrieves a mark by its ID.
            </summary>
            <param name="id">The ID of the mark.</param>
            <returns>The requested mark.</returns>
        </member>
        <member name="M:UniTrackBackend.Controllers.MarkController.GetAllMarks">
            <summary>
            Retrieves all marks.
            </summary>
            <returns>A list of all marks.</returns>
        </member>
        <member name="M:UniTrackBackend.Controllers.MarkController.GetMarksByStudent(System.Int32)">
            <summary>
            Retrieves marks for a specific student.
            </summary>
            <param name="studentId">The ID of the student.</param>
            <returns>A list of marks for the specified student.</returns>
        </member>
        <member name="M:UniTrackBackend.Controllers.MarkController.GetMarksByTeacher(System.Int32)">
            <summary>
            Retrieves marks assigned by a specific teacher.
            </summary>
            <param name="teacherId">The ID of the teacher.</param>
            <returns>A list of marks assigned by the specified teacher.</returns>
        </member>
        <member name="M:UniTrackBackend.Controllers.MarkController.GetMarksBySubject(System.Int32)">
            <summary>
            Retrieves marks for a specific subject.
            </summary>
            <param name="subjectId">The ID of the subject.</param>
            <returns>A list of marks for the specified subject.</returns>
        </member>
        <member name="M:UniTrackBackend.Controllers.MarkController.GetMarksByDate(System.DateTime)">
            <summary>
            Retrieves marks assigned on a specific date.
            </summary>
            <param name="date">The date of interest.</param>
            <returns>A list of marks assigned on the specified date.</returns>
        </member>
        <member name="M:UniTrackBackend.Controllers.MarkController.UpdateMark(System.Int32,UniTrackBackend.Api.DTO.MarkDto)">
            <summary>
            Updates a specific mark.
            </summary>
            <param name="id">The ID of the mark to update.</param>
            <param name="model">The view model containing the updated mark details.</param>
            <returns>The updated mark.</returns>
        </member>
        <member name="M:UniTrackBackend.Controllers.MarkController.DeleteMark(System.Int32)">
            <summary>
            Deletes a specific mark.
            </summary>
            <param name="id">The ID of the mark to delete.</param>
            <returns>No content on successful deletion, NotFound if the mark does not exist.</returns>
        </member>
        <member name="T:UniTrackBackend.Controllers.RecommendationController">
            <summary>
            Handles the recommendation process for students.
            </summary>
        </member>
        <member name="M:UniTrackBackend.Controllers.RecommendationController.GetAnalysis(System.Int32)">
            <summary>
            Retrieves recommendations based on a student's ID.
            </summary>
            <param name="studentId">The ID of the student for whom recommendations are being requested.</param>
            <returns>A list of recommendations if available, otherwise a bad request response.</returns>
        </member>
        <member name="T:UniTrackBackend.Controllers.SchoolController">
            <summary>
            Handles school-related actions such as managing school records.
            </summary>
        </member>
        <member name="T:UniTrackBackend.Controllers.StudentController">
            <summary>
            The StudentController manages student-related operations within the system.
            It provides functionalities such as adding, retrieving, updating, and deleting student records.
            The controller interacts with the IStudentService to handle business logic and uses IMapper for model mapping.
            </summary>
        </member>
        <member name="M:UniTrackBackend.Controllers.StudentController.#ctor(UniTrackBackend.Services.IStudentService,UniTrackBackend.Services.Mappings.IMapper)">
            <summary>
            Initializes a new instance of the StudentController with the required services.
            </summary>
            <param name="studentService">Service for managing student data.</param>
            <param name="mapper">Service for mapping view models to entities.</param>
        </member>
        <member name="M:UniTrackBackend.Controllers.StudentController.GetStudent(System.Int32)">
            <summary>
            Retrieves a student by their ID.
            </summary>
            <param name="id">The ID of the student to retrieve.</param>
            <returns>The student data if found; otherwise, a NotFound result.</returns>
        </member>
        <member name="M:UniTrackBackend.Controllers.StudentController.GetAllStudents">
            <summary>
            Retrieves all student records.
            </summary>
            <returns>A list of all students.</returns>
        </member>
        <member name="M:UniTrackBackend.Controllers.StudentController.DeleteStudent(System.Int32)">
            <summary>
            Deletes a student record by their ID.
            </summary>
            <param name="id">The ID of the student to delete.</param>
            <returns>A NoContent result indicating successful deletion, or NotFound if the student does not exist.</returns>
        </member>
        <member name="T:UniTrackBackend.Controllers.TeacherController">
            <summary>
            Handles teacher-related actions such as managing teacher records.
            </summary>
        </member>
        <member name="M:UniTrackBackend.Controllers.TeacherController.GetAllTeachers">
            <summary>
            Retrieves all teachers.
            </summary>
            <returns>A list of all teachers.</returns>
        </member>
        <member name="M:UniTrackBackend.Controllers.TeacherController.GetTeacher(System.Int32)">
            <summary>
            Retrieves a specific teacher by their ID.
            </summary>
            <param name="id">The ID of the teacher to retrieve.</param>
            <returns>The teacher object if found, otherwise returns not found.</returns>
        </member>
        <member name="M:UniTrackBackend.Controllers.TeacherController.UpdateTeacher(System.Int32,UniTrackBackend.Api.DTO.TeacherDto)">
            <summary>
            Updates an existing teacher's details.
            </summary>
            <param name="id">The ID of the teacher to update.</param>
            <param name="teacher">The updated teacher object.</param>
            <returns>Returns no content if update is successful, otherwise a bad request.</returns>
        </member>
        <member name="M:UniTrackBackend.Controllers.TeacherController.DeleteTeacher(System.Int32)">
            <summary>
            Deletes a teacher by their ID.
            </summary>
            <param name="id">The ID of the teacher to delete.</param>
            <returns>Returns no content if deletion is successful.</returns>
        </member>
    </members>
</doc>
